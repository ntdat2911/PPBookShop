generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Promotion {
  PromotionID     String          @id @default(uuid())
  PromotionName   String
  DiscountPercent Float
  ExpiredDate     DateTime
  IsAvailable     Boolean
  CreatedAt       DateTime        @default(now())
  UpdatedAt       DateTime        @updatedAt
  BookPromotions  BookPromotion[]
}

model Category {
  CategoryID       String   @id @default(uuid())
  CategoryName     String
  ParentCategoryID String?
  IsCategoryActive Boolean
  CreatedAt        DateTime @default(now())
  UpdatedAt        DateTime @updatedAt
  Books            Book[]
}

model Author {
  AuthorID   String @id @default(uuid())
  AuthorName String
  Bio        String
  Books      Book[]
}

model Book {
  BookID          String          @id @default(uuid())
  ImageURL        String
  BookTitle       String
  BookDescription String
  BookPrice       Float
  CategoryID      String
  AuthorBy        String
  PublishDate     DateTime
  IsBookActive    Boolean
  IsOutOfStock    Boolean
  Rating          Float
  CreatedAt       DateTime        @default(now())
  UpdatedAt       DateTime        @updatedAt
  Category        Category        @relation(fields: [CategoryID], references: [CategoryID])
  Author          Author          @relation(fields: [AuthorBy], references: [AuthorID])
  Reviews         Review[]
  BookPromotions  BookPromotion[]
  OrderItems      OrderItem[]
}

model User {
  UserID           String    @id @default(uuid())
  ImageURL         String?
  UserName         String
  Name             String
  Password         String
  Email            String
  IsUserActive     Boolean
  IsEmailConfirmed Boolean
  CreatedAt        DateTime  @default(now())
  UpdatedAt        DateTime  @updatedAt
  Reviews          Review[]
  Orders           Order[]
  Addresses        Address[]
  Cart             Cart?
}

model Review {
  ReviewID    String   @id @default(uuid())
  BookID      String
  UserID      String
  ReviewTitle String
  Rating      Float
  Comment     String
  CreatedAt   DateTime @default(now())
  Book        Book     @relation(fields: [BookID], references: [BookID])
  User        User     @relation(fields: [UserID], references: [UserID])
}

model Admin {
  AdminID   String @id @default(uuid())
  AdminName String
  Password  String
  Email     String
}

model Address {
  AddressID    String  @id @default(uuid())
  UserID       String
  Phone        String
  ReceiverName String
  Address      String
  IsDefault    Boolean
  User         User    @relation(fields: [UserID], references: [UserID])
  Order        Order[]
}

model Order {
  OrderID       String        @id @default(uuid())
  UserID        String
  TotalPrice    Float
  Status        OrderStatus
  AddressID     String
  PaymentMethod PaymentMethod
  CreatedAt     DateTime      @default(now())
  User          User          @relation(fields: [UserID], references: [UserID])
  Address       Address       @relation(fields: [AddressID], references: [AddressID])
  OrderItems    OrderItem[]
}

model OrderItem {
  OrderItemID    String @id @default(uuid())
  OrderID        String
  BookID         String
  ItemQuantity   Int
  UnitItemPrice  Float
  TotalItemPrice Float
  Order          Order  @relation(fields: [OrderID], references: [OrderID])
  Book           Book   @relation(fields: [BookID], references: [BookID])
  Discount       Float?
}

model BookPromotion {
  BookPromotionID String    @id @default(uuid())
  PromotionID     String
  BookID          String
  Promotion       Promotion @relation(fields: [PromotionID], references: [PromotionID])
  Book            Book      @relation(fields: [BookID], references: [BookID])
}

model Cart {
  CartID     String   @id @default(uuid())
  UserID     String   @unique
  CartDetail Json
  CreatedAt  DateTime @default(now())
  User       User     @relation(fields: [UserID], references: [UserID])
}

model AboutUs {
  AboutUsID Int      @id
  Content   String
  CreatedAt DateTime @default(now())
  UpdatedAt DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  COMPLETED
  SHIPPING
  CANCELLED
  PAID
}

enum PaymentMethod {
  PAYPAL
  COD
}
