// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Updated for PostgreSQL
  url      = env("DATABASE_URL")
}

model Admin {
  AdminID   Int      @id @default(autoincrement())
  AdminName String
  Password  String
  Email     String
  CreatedAt DateTime @default(now())
  UpdatedAt DateTime @updatedAt
}

model User {
  UserID       Int      @id @default(autoincrement())
  ImageURL     String?
  UserName     String
  Password     String
  Email        String
  IsUserActive Boolean
  CreatedAt    DateTime @default(now())
  UpdatedAt    DateTime @updatedAt
  Reviews      Review[]
  Orders       Order[]
  Shipments    Ship[]
}

model BookPromotion {
  id          Int       @id @default(autoincrement())
  Promotion   Promotion @relation(fields: [PromotionID], references: [PromotionID])
  PromotionID Int
  Book        Book      @relation(fields: [BookID], references: [BookID])
  BookID      Int
  CreatedAt   DateTime  @default(now())
  UpdatedAt   DateTime  @updatedAt
}

model Category {
  CategoryID       Int        @id @default(autoincrement())
  CategoryName     String
  ParentCategory   Category?  @relation("CategoryToCategory", fields: [ParentCategoryID], references: [CategoryID])
  ParentCategoryID Int?
  IsCategoryActive Boolean
  CreatedAt        DateTime   @default(now())
  UpdatedAt        DateTime   @updatedAt
  Books            Book[]
  SubCategories    Category[] @relation("CategoryToCategory")
}

model Book {
  BookID          Int             @id @default(autoincrement())
  ImageURL        String
  BookTitle       String
  BookDescription String
  BookPrice       Float
  Category        Category        @relation(fields: [CategoryID], references: [CategoryID])
  CategoryID      Int
  Author          Author          @relation(fields: [AuthorID], references: [AuthorID])
  AuthorID        Int
  PublishDate     DateTime
  BookQuantity    Int
  IsBookActive    Boolean
  Rating          Float
  CreatedAt       DateTime        @default(now())
  UpdatedAt       DateTime        @updatedAt
  Reviews         Review[]
  BookPromotions  BookPromotion[]
  OrderItems      OrderItem[]
}

model Review {
  ReviewID    Int      @id @default(autoincrement())
  Book        Book     @relation(fields: [BookID], references: [BookID])
  BookID      Int
  User        User     @relation(fields: [UserID], references: [UserID])
  UserID      Int
  ReviewTitle String
  Rating      Float
  Comment     String
  CreatedAt   DateTime @default(now())
  UpdatedAt   DateTime @updatedAt
}

model Author {
  AuthorID   Int      @id @default(autoincrement())
  AuthorName String
  Bio        String
  CreatedAt  DateTime @default(now())
  UpdatedAt  DateTime @updatedAt
  Books      Book[]
}

model Order {
  OrderID    Int         @id @default(autoincrement())
  User       User        @relation(fields: [UserID], references: [UserID])
  UserID     Int
  TotalPrice Float
  Status     String
  Ship       Ship        @relation(fields: [ShipID], references: [ShipID])
  ShipID     Int
  CreatedAt  DateTime    @default(now())
  UpdatedAt  DateTime    @updatedAt
  OrderItems OrderItem[]
}

model OrderItem {
  OrderItemID    Int      @id @default(autoincrement())
  Order          Order    @relation(fields: [OrderID], references: [OrderID])
  OrderID        Int
  Book           Book     @relation(fields: [BookID], references: [BookID])
  BookID         Int
  ItemQuantity   Int
  TotalItemPrice Float
  CreatedAt      DateTime @default(now())
  UpdatedAt      DateTime @updatedAt
}

model Ship {
  ShipID       Int      @id @default(autoincrement())
  User         User     @relation(fields: [UserID], references: [UserID])
  UserID       Int
  Phone        String
  ReceiverName String
  Address      String
  IsDefault    Boolean
  CreatedAt    DateTime @default(now())
  UpdatedAt    DateTime @updatedAt
  Orders       Order[]
}

model Promotion {
  PromotionID      Int             @id @default(autoincrement())
  PromotionName    String
  DiscountPercent  Float
  DiscountQuantity Int
  ExpiredDate      DateTime
  IsAvailable      Boolean
  CreatedAt        DateTime        @default(now())
  UpdatedAt        DateTime        @updatedAt
  BookPromotions   BookPromotion[]
}
